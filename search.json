[{"title":"Docker搭建mysql主从复制","url":"/2022/04/17/Docker%E6%90%AD%E5%BB%BAmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/","content":"<h3 id=\"一、通过docker拉去mysql镜像\"><a href=\"#一、通过docker拉去mysql镜像\" class=\"headerlink\" title=\"一、通过docker拉去mysql镜像\"></a>一、通过docker拉去mysql镜像</h3><ol>\n<li>docker pull mysql:5.7</li>\n</ol>\n<h3 id=\"二、启动主mysql服务\"><a href=\"#二、启动主mysql服务\" class=\"headerlink\" title=\"二、启动主mysql服务\"></a>二、启动主mysql服务</h3><ol>\n<li><p>启动主mysql 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 3307:3306 --name mysql-master \\</span><br><span class=\"line\">-v /mydata/mysql-master/log:/var/log/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-master/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-master/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root  \\</span><br><span class=\"line\">-d mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\">参数解释</span><br><span class=\"line\">\t-p 指定端口 映射端口:主机端口</span><br><span class=\"line\">\t--name 指定启动镜像别名</span><br><span class=\"line\">\t-v 挂载目录（数据卷）</span><br><span class=\"line\">\t-d 后台启动</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在mysql的配置文件夹<code>/mydata/mysql-master/conf</code>中创建一个配置文件<code>my.cnf</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">1、进入目录 cd /mydata/mysql-master/conf</span><br><span class=\"line\">2、使用命令 vim my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置server_id，同一局域网中需要唯一</span></span></span><br><span class=\"line\">server_id=101</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 指定不需要同步的数据库名称</span></span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 开启二进制日志功能</span></span></span><br><span class=\"line\">log-bin=mall-mysql-bin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置二进制日志使用内存大小（事务）</span></span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置使用的二进制日志格式（mixed,statement,row）</span></span></span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span></span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\"></span><br><span class=\"line\">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class=\"line\">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class=\"line\">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\">collation-server=utf8_unicode_ci</span><br><span class=\"line\">skip-character-set-client-handshake</span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 指定字符集</span></span></span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启mysql-master实例：<font color=\"#FF0000\">docker restart mysql-master</font></p>\n</li>\n<li><p>进入mysql-master容器：<font color=\"#FF0000\">docker exec -it mysql-master &#x2F;bin&#x2F;bash</font></p>\n<p><img src=\"/../../../images/imagi-20210401113202243.png\" alt=\"image-20210401113202243\"></p>\n</li>\n<li><p>进入容器后输入mysql -uroot -proot</p>\n<p><img src=\"/../../../images/image-20210401113252684.png\" alt=\"image-20210401113252684\"></p>\n</li>\n<li><p>创建数据同步用户</p>\n<ol>\n<li><p>命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class=\"line\">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 到时候创建的这个用户需要对应配置从服务器里面参数的master_user和master_password</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><img src=\"/../../../images/image-20210401114807485.png\" alt=\"image-20210401114807485\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"三、-启动从mysql服务\"><a href=\"#三、-启动从mysql服务\" class=\"headerlink\" title=\"三、 启动从mysql服务\"></a>三、 启动从mysql服务</h3><ol>\n<li><p>服务启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 3308:3306 --name mysql-slave \\</span><br><span class=\"line\">-v /mydata/mysql-slave/log:/var/log/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-slave/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-slave/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root  \\</span><br><span class=\"line\">-d mysql:5.7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在mysql的配置文件夹<code>/mydata/mysql-slave/conf</code>中创建一个配置文件<code>my.cnf</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">1、进入目录 cd /mydata/mysql-master/conf</span><br><span class=\"line\">2、使用命令 vim my.cnf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置server_id，同一局域网中需要唯一</span></span></span><br><span class=\"line\">server_id=102</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 指定不需要同步的数据库名称</span></span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span></span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置二进制日志使用内存大小（事务）</span></span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置使用的二进制日志格式（mixed,statement,row）</span></span></span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span></span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># relay_log配置中继日志</span></span></span><br><span class=\"line\">relay_log=mall-mysql-relay-bin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span></span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># slave设置为只读（具有super权限的用户除外）</span></span></span><br><span class=\"line\">read_only=1</span><br><span class=\"line\"></span><br><span class=\"line\">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class=\"line\">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class=\"line\">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\">collation-server=utf8_unicode_ci</span><br><span class=\"line\">skip-character-set-client-handshake</span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8 </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启mysql-slave实例：<font color=\"#FF0000\">docker restart mysql-slave</font></p>\n<ol>\n<li>查询主数据状态：<font color=\"#FF0000\">show master status</font></li>\n</ol>\n<p><img src=\"/../../../images/image-20210401114044535.png\" alt=\"image-20210401114044535\"></p>\n</li>\n<li><p>进入从mysql服务 <font color=\"#FF0000\">docker exec -it mysql-slave &#x2F;bin&#x2F;bash</font></p>\n</li>\n<li><p>连接mysql，输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">change master to master_host=&#x27;192.168.0.88&#x27;, master_user=&#x27;slave&#x27;, master_password=&#x27;123456&#x27;, master_port=3307, master_log_file=&#x27;mall-mysql-bin.000003&#x27;, master_log_pos=154, master_connect_retry=30;  </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../../../images/image-20210401114456682.png\" alt=\"image-20210401114456682\"></p>\n<p>参数命令详解</p>\n<ol>\n<li>master_host：主数据库的IP地址；</li>\n<li>master_port：主数据库的运行端口；</li>\n<li>master_user：在主数据库创建的用于同步数据的用户账号；</li>\n<li>master_password：在主数据库创建的用于同步数据的用户密码；</li>\n<li>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</li>\n<li>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</li>\n<li>master_connect_retry：连接失败重试的时间间隔，单位为秒。</li>\n</ol>\n</li>\n<li><p>查询从数据库状态： <font color=\"#FF0000\">show slave status</font></p>\n<p><img src=\"/../../../images/image-20210401115118759.png\" alt=\"image-20210401115118759\"></p>\n<p>如果两个都为NO表示还没有开始同步，需要手动开启同步，使用命令：<font color=\"#FF0000\">start slave</font></p>\n</li>\n<li><p>测试的话，你可以在你的主库创建一个数据库test，然后在主从mysql客户端输入命令 ：<font color=\"#FF0000\">show databases</font></p>\n</li>\n</ol>\n<p>以上是搭建主从复制的简单流程</p>\n","tags":["运维"]},{"title":"jdk命令工具的使用","url":"/2022/04/17/jdk%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<h1 id=\"常见jdk工具的使用\"><a href=\"#常见jdk工具的使用\" class=\"headerlink\" title=\"常见jdk工具的使用\"></a>常见jdk工具的使用</h1><h3 id=\"一、jps\"><a href=\"#一、jps\" class=\"headerlink\" title=\"一、jps\"></a>一、jps</h3><ol>\n<li><p>作用：列出正在运行的虚拟机进程，并显示虚拟机执行主类函数所在的类名称以及进程的本地虚拟机唯一ID。</p>\n</li>\n<li><p>命令格式：jps [options] [hostid]</p>\n</li>\n<li><p>参数解释：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-q 显示进程ID</span><br><span class=\"line\">-m 显示进程id，主类名，以及传入main方法的参数</span><br><span class=\"line\">-l 显示进程id 主类名</span><br><span class=\"line\">-v 显示进程id，主类名称，以及传JVM的参数</span><br><span class=\"line\">-V 显示进程id 主类名</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"二、jstat\"><a href=\"#二、jstat\" class=\"headerlink\" title=\"二、jstat\"></a>二、jstat</h3><ol>\n<li><p>作用：监视虚拟机各种运行状态信息，可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据</p>\n</li>\n<li><p>命令格式：jstat [options vmid [interval[count]]]</p>\n</li>\n<li><p>参数解释：</p>\n<ol>\n<li><p>第一个参数options：代表用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集和运行编译状况，具体参数如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-class 显示有关类加载器行为的统计信息</span><br><span class=\"line\">  \t输出参数详解：Loaded：已加载的类数 Bytes：加载的kb数 Unloaded：卸载的类数 Bytes：卸载的kb数</span><br><span class=\"line\">-compiler：显示有关java Hotspot VM即时编译器行为的统计信息</span><br><span class=\"line\">  输出参数详解：Compiled：执行编译任务数 Failed：编译任务数失败 Invalid：无效的编译任务数 Time：执行编译任务花费的时间 FailedType：上次失败编译的编译类型 FailedMethos：上次失败编译的类名和方法</span><br><span class=\"line\">-gc：显示有关垃圾收集堆行为的统计信息</span><br><span class=\"line\">-gccapacity：显示有关各个垃圾回收代容量及其相应空间的统计信息</span><br><span class=\"line\">-gccause：显示有关垃圾收集统计信息（同-gcutil）,以及上一次和当前垃圾收集事件的原因</span><br><span class=\"line\">-gcnew：显示新生代行为的统计信息</span><br><span class=\"line\">-gcnewcapacity：显示有关新生代大小机器相应的统计信息</span><br><span class=\"line\">-gcold：显示有关老年代行为的统计信息和元空间统计信息</span><br><span class=\"line\">-gcoldcapacity：显示有关老年代大小的统计</span><br><span class=\"line\">-gcmetacapacity：显示有关元空间大小的统计信息</span><br><span class=\"line\">-gcutil：显示有关垃圾收集统计信息</span><br><span class=\"line\">  输出参数详解：S0：幸存者空间0利用率占该空间当前容量的百分比 S1:幸存者空间1利用率占空间当前容量的百分比 E:Eden空间利用率占空间当前容量的百分比 O:老年代利用率占空间当前容量的百分比 M:元空间利用率占用当前容量的百分比 CCS:压缩的类空间利用率，百分比展示 YGC：新生代GC事件的数量 YGCT：新生代垃圾回收的时间 FGC：完整GC事件的数量 FGCT：完整的垃圾收集时间 GCT：总的垃圾收集时间</span><br><span class=\"line\">-printcompilation：显示java HotSpot VM编译方法的统计信息</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二个参数vmid：如果本地虚拟机进程，vmid和本地虚拟机唯一ID是一致的，如果是远程虚拟机进程，那么vmid的格式是：protocol:lvmid[@hostname[:port]&#x2F;servername]</p>\n</li>\n<li><p>第三个参数：interval</p>\n<ol>\n<li>采样间隔，单位为秒或者毫秒</li>\n<li>指定后，jstat 命令将在每个间隔产生其输出</li>\n</ol>\n</li>\n<li><p>第四个参数：count</p>\n<ol>\n<li>采集样本的数量</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"三、Jinfo\"><a href=\"#三、Jinfo\" class=\"headerlink\" title=\"三、Jinfo\"></a>三、Jinfo</h3><ol>\n<li><p>作用：实时查看和调整虚拟机各项参数</p>\n</li>\n<li><p>命令格式：jinfo [options] <pid></p>\n</li>\n<li><p>参数解释：</p>\n<ol>\n<li><p>第一个参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">no option：输出全部参数和系统属性</span><br><span class=\"line\">-flag name ：输出对应名称的参数</span><br><span class=\"line\">-flag [+ | -]name:开启或者关闭对应名称的参数</span><br><span class=\"line\">-flag name=value：设定对应名称的参数</span><br><span class=\"line\">-flags：输出全部的参数</span><br><span class=\"line\">-sysprops：输出系统属性</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>举例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令：jinfo pid</span><br><span class=\"line\">描述：输出当前jvm进程的全部参数和系统属性</span><br><span class=\"line\"></span><br><span class=\"line\">命令：jinfo -flag PrintGc pid</span><br><span class=\"line\">描述：输出虚拟机参数PrintGc的值</span><br><span class=\"line\"></span><br><span class=\"line\">命令：jinfo -flags pid</span><br><span class=\"line\">描述：输入虚拟机全部参数</span><br><span class=\"line\">  </span><br><span class=\"line\">命令：jinfo -flag [+|-]PrintGC pid</span><br><span class=\"line\">描述：开启PrintGC参数</span><br><span class=\"line\">  </span><br><span class=\"line\">命令：jinfo -flag HeapDumpPath pid</span><br><span class=\"line\">描述：查询dump文件目录位置</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"四、jmap\"><a href=\"#四、jmap\" class=\"headerlink\" title=\"四、jmap\"></a>四、jmap</h3><ol>\n<li><p>作用：是一个多功能命令，它可以生成java程序的dump文件，也可以查看堆内对象信息、查看ClassLoader的信息以及finalizer队列</p>\n</li>\n<li><p>命令格式：jmap [options] <pid></p>\n</li>\n<li><p>参数解释：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">no option :查看进程内存映像信息，类似solaris pmap命令</span><br><span class=\"line\">heap：超现实Java堆详细信息</span><br><span class=\"line\">histo[live]：显示堆对象的统计信息</span><br><span class=\"line\">clstats:打印类加载器信息</span><br><span class=\"line\">finalizerinfo：显示F-queue队列等待Finalizer线程执行finalizer方法的对象</span><br><span class=\"line\">dump&lt;dump-options&gt;:生成堆转储快照</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>举例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令：jmap pid</span><br><span class=\"line\">描述：查看进程的内存映像信息</span><br><span class=\"line\">使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称</span><br><span class=\"line\"></span><br><span class=\"line\">命令：jmap -heap pid</span><br><span class=\"line\">描述：显示java堆详细信息</span><br><span class=\"line\">打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和各内存区域内存使用信息</span><br><span class=\"line\"></span><br><span class=\"line\">命令：jmap -histo pid</span><br><span class=\"line\">描述：显示堆中对象的统计信息</span><br><span class=\"line\">其中包括每个java类，对象数量、内存大小、完全限定的类名、打印的虚拟机内部类名将会带有一个‘*’前缀。如果制定了live子选项，则只会计算活动的对象</span><br><span class=\"line\"></span><br><span class=\"line\">命令：jmap -clstats pid</span><br><span class=\"line\">描述：打印类加载器的信息</span><br><span class=\"line\">-clstats是permstat的替代方案，在JDK8之前，-permstat用来打印类加载器的数据</span><br><span class=\"line\">打印Java堆内存的永久保存区域的类加载器的智能统计信息，对于每个类加载器而言，他的名称活跃度地址、父类加载器，它所加载的类的数量和大小都会被打印</span><br><span class=\"line\"></span><br><span class=\"line\">命令：jmap -finalizerinfo pid</span><br><span class=\"line\">描述：打印等待终结的对象信息</span><br><span class=\"line\">Number of objects pending for finalizerinfo：0说明当前F-QUEUE队列中没有等待finalizer线程执行finalizer方法的对象</span><br><span class=\"line\"></span><br><span class=\"line\">命令：jmap -dump:live,format=b,file=jmap.bin &lt;pid&gt;</span><br><span class=\"line\">描述：生成堆转存储快照dump文件</span><br><span class=\"line\">以二进制格式转存储java堆到制定filename的文件中。live子选项是可选。如果制定live子选项，堆中只有活动的对象会被存储，想要浏览heap dump，你可以使用jhat命令</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"五、jhat\"><a href=\"#五、jhat\" class=\"headerlink\" title=\"五、jhat\"></a>五、jhat</h3><ol>\n<li><p>作用：与jmap搭配使用来分析jmap生产的堆转存储快照。jhat内置一个微型的HTTP&#x2F;HTML服务器，生产dump文件的分析结果后，可以在浏览器中查看。一般不会在部署应用程序服务器直接分析，。替代工具：VisualVM、Ecplise Memory Analyzer、IBM HeapAnalyzer等工具</p>\n</li>\n<li><p>命令格式：jhat [options] 堆转储文件</p>\n</li>\n<li><p>参数解释</p>\n<ol>\n<li><p>第一个参数：options</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[-stack &lt;bool&gt;]:开关对象分配调用栈跟踪(tracking object allocation call stack)。如果分配位置信息在堆转储中不可用，则必须将此标志设置为false，默认值为true</span><br><span class=\"line\">[-refs &lt;bool&gt;]:开关对象引用跟踪(tracking of references to objects)。默认值为true，默认情况下返回指针是指向其他特定对象的对象，如反向链接或输入引用（references or incoming references)，会统计计算堆中的所有对象</span><br><span class=\"line\">[-port&lt;port&gt;]:设置jhat Httpserver的端口号</span><br><span class=\"line\">[-exclude &lt;file&gt;]:指定对象查询是需要排除的数据成员列表文件(列出应从可访问对象查询中排除的数据成员文件)。例如，如果文件列列出了java.lang.String.value，那么当从某个特定对象Object o 计算可达到的对象列表时，引用路径涉及java.lang.String.value的都会被排除</span><br><span class=\"line\">[-baseline&lt;file&gt;]:指定一个基准堆转储(baseline heap dump)。在两个heap dumps中有相同objectId的对象会被标记为不是新的(maked as not being new)。其他对象被标记新的。在比较两个不用的堆转储时很有用</span><br><span class=\"line\">[-debug &lt;file&gt;] ：设置debug级别。0表示不输出调试信息。值越大则表示输出更详细的debug信息</span><br><span class=\"line\">[-version ]：启动后只显示版本信息就退出</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二个参数：堆转储文件</p>\n<ol>\n<li>要浏览的java二进制堆转储文件</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"六、-jstack\"><a href=\"#六、-jstack\" class=\"headerlink\" title=\"六、 jstack\"></a>六、 jstack</h3><ol>\n<li>作用：查看或者导出Java应用程序中线程堆栈信息</li>\n<li>线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈集合，生成线程快照的目的是定位线程出现长时间停顿的原因，如线程死锁、死循环、长时间等待外部资源等。线程出现停顿的时候通过jstack来查看线程调用堆栈，就可以知道没有响应的线程到底在后台做了什么事情，或者等待什么资源。如果Java程序崩溃生成core文件，jstack工具可以用来获取core文件的java stack 和native stack的信息，从而可以轻松知道java程序是如果崩溃和在程序何处发生问题。另外，jstack工具还可以附属到正在运行的java程序中，看到当时运行java程序的javastack和native stack的信息</li>\n<li>命令格式：jstack [options] <pid></li>\n<li>参数解释<ol>\n<li>-F：当线程挂起，使用jstack -l pid请求不被响应时，强制输出线程堆栈</li>\n<li>-l：除堆栈外，显示关于锁的附加信息例如：ownable synchronizers</li>\n<li>-m：可以同时输出java以及c&#x2F;c++的堆栈信息</li>\n<li>演示：<ol>\n<li>CPU过高：<ul>\n<li>使用Process Explorer工具，找到CPU占用率高的进程id</li>\n<li>右击该进程，查看属性。在thread选项卡中，找到CPU占用率高的线程id</li>\n<li>把线程id转换成16禁止</li>\n<li>使用jstack -l pid 查看进程的线程快照</li>\n<li>在线程快照中指定的线程，并分析代码</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n","categories":["jvm"],"tags":["Java"]}]